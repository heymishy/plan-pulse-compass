import React from 'react';
import { AppContext } from '@/context/AppContext';
import { mockPeople, mockTeams, mockAllocations } from './mock-data';

export const TestAppProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const mockContext = {
    people: mockPeople,
    teams: mockTeams,
    allocations: mockAllocations,
    // Add other required context properties with default values
    setPeople: () => {},
    addPerson: () => Promise.resolve(mockPeople[0]),
    updatePerson: () => Promise.resolve(),
    deletePerson: () => Promise.resolve(),
    roles: [],
    setRoles: () => {},
    setTeams: () => {},
    addTeam: () => Promise.resolve(mockTeams[0]),
    updateTeam: () => Promise.resolve(),
    deleteTeam: () => Promise.resolve(),
    teamMembers: [],
    setTeamMembers: () => {},
    addTeamMember: () => mockTeams[0],
    updateTeamMember: () => {},
    removeTeamMember: () => {},
    getTeamMembers: () => [],
    divisions: [],
    setDivisions: () => {},
    unmappedPeople: [],
    setUnmappedPeople: () => {},
    addUnmappedPerson: () => {},
    removeUnmappedPerson: () => {},
    projects: [],
    setProjects: () => {},
    addProject: () => Promise.resolve({} as any),
    updateProject: () => Promise.resolve(),
    deleteProject: () => Promise.resolve(),
    epics: [],
    setEpics: () => {},
    releases: [],
    setReleases: () => {},
    solutions: [],
    setSolutions: () => {},
    projectSkills: [],
    setProjectSkills: () => {},
    projectSolutions: [],
    setProjectSolutions: () => {},
    setAllocations: () => {},
    addAllocation: () => Promise.resolve({} as any),
    updateAllocation: () => Promise.resolve(),
    deleteAllocation: () => Promise.resolve(),
    cycles: [],
    setCycles: () => {},
    runWorkCategories: [],
    setRunWorkCategories: () => {},
    actualAllocations: [],
    setActualAllocations: () => {},
    iterationReviews: [],
    setIterationReviews: () => {},
    iterationSnapshots: [],
    setIterationSnapshots: () => {},
    config: null,
    setConfig: () => {},
    isSetupComplete: true,
    setIsSetupComplete: () => {},
    goals: [],
    setGoals: () => {},
    northStar: null,
    setNorthStar: () => {},
    goalEpics: [],
    setGoalEpics: () => {},
    goalMilestones: [],
    setGoalMilestones: () => {},
    goalTeams: [],
    setGoalTeams: () => {},
    addGoal: () => {},
    updateGoal: () => {},
    divisionLeadershipRoles: [],
    setDivisionLeadershipRoles: () => {},
    addDivisionLeadershipRole: () => ({}) as any,
    updateDivisionLeadershipRole: () => {},
    removeDivisionLeadershipRole: () => {},
    getDivisionLeadershipRoles: () => [],
    skills: [],
    setSkills: () => {},
    personSkills: [],
    setPersonSkills: () => {},
    addSkill: () => ({}) as any,
    updateSkill: () => {},
    deleteSkill: () => {},
    addPersonSkill: () => ({}) as any,
    updatePersonSkill: () => {},
    deletePersonSkill: () => {},
    getPersonSkills: () => [],
    milestones: [],
    isDataLoading: false,
  };

  return (
    <AppContext.Provider value={mockContext as any}>
      {children}
    </AppContext.Provider>
  );
};
