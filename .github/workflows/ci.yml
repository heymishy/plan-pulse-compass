name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  BUN_VERSION: '1.0.0'

jobs:
  # Fast validation track
  quick-validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
            playwright/.cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true

      - name: Quick build check
        run: npm run build
        env:
          CI: true

  # Comprehensive testing track (runs after quick validation)
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quick-validate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        test-type: [integration, ui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
        env:
          CI: true

      - name: Run UI tests
        if: matrix.test-type == 'ui'
        run: npm run test:layout
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.test-type }}-test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Console Error Monitoring (runs on all pushes and PRs)
  console-error-monitoring:
    name: Console Error Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quick-validate]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and Playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            playwright/.cache
          key: ${{ runner.os }}-deps-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-playwright-
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run test:e2e:install

      - name: Run Console Error Monitoring Tests
        run: npm run test:console-errors:ci
        env:
          CI: true

      - name: Upload Console Error Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: console-error-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Add Console Error Summary to GitHub Actions
        if: always()
        run: |
          echo "## 🧪 Console Error Monitoring Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if there's a test results directory
          if [ -d "test-results" ]; then
            FAILED_TESTS=$(find test-results -name "*.xml" | xargs grep -l "failure" | wc -l 2>/dev/null || echo "0")
            TOTAL_TESTS=$(find test-results -name "*.xml" | wc -l 2>/dev/null || echo "0")
            
            if [ "$FAILED_TESTS" -eq "0" ]; then
              echo "✅ **All pages passed console error checks!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "📊 **Results**: $TOTAL_TESTS pages tested, 0 console errors found" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Console errors detected on some pages**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "📊 **Results**: $TOTAL_TESTS pages tested, $FAILED_TESTS pages with errors" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Test results unavailable**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 **Detailed Report**: Check the uploaded artifacts for full test results" >> $GITHUB_STEP_SUMMARY

  # E2E Tests (only on main branch or manual trigger)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quick-validate]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write
      actions: write
    concurrency:
      group: pages-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
            playwright/.cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npm run test:e2e:install

      - name: Run E2E tests with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 12
          max_attempts: 2
          command: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Deploy Playwright Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report
          destination_dir: e2e-reports/${{ github.run_number }}
          keep_files: true

      - name: Add GitHub Actions Summary
        if: always()
        run: |
          echo "## 🎭 Playwright E2E Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Interactive Test Report**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/e2e-reports/${{ github.run_number }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The report includes screenshots, videos, and traces for easy debugging of test failures." >> $GITHUB_STEP_SUMMARY

  # Full Test Suite with coverage (only on main branch)
  full-tests:
    name: Full Test Suite with Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [comprehensive-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quick-validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Generate version info
        id: version
        run: |
          # Get package version
          VERSION=$(node -p "require('./package.json').version")

          # Get build number from GitHub run number
          BUILD_NUMBER=${{ github.run_number }}

          # Get commit hash
          COMMIT_HASH=${{ github.sha }}
          COMMIT_HASH_SHORT=$(echo $COMMIT_HASH | cut -c1-7)

          # Get branch name
          BRANCH=${GITHUB_REF#refs/heads/}

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Set environment
          ENVIRONMENT="production"

          # Create version info JSON and save to file
          cat > version-info.json << EOF
          {
            "version": "$VERSION",
            "buildNumber": "$BUILD_NUMBER",
            "commitHash": "$COMMIT_HASH",
            "commitHashShort": "$COMMIT_HASH_SHORT",
            "buildDate": "$BUILD_DATE",
            "branch": "$BRANCH",
            "environment": "$ENVIRONMENT"
          }
          EOF

          # Set individual outputs (avoiding the problematic JSON output)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "commit_hash_short=$COMMIT_HASH_SHORT" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

          # If we need the JSON in an output, encode it as base64
          VERSION_INFO_B64=$(cat version-info.json | base64 -w 0)
          echo "version_info_b64=$VERSION_INFO_B64" >> $GITHUB_OUTPUT

      - name: Build application
        run: npm run build
        env:
          CI: true
          VITE_APP_VERSION: ${{ steps.version.outputs.version }}
          VITE_APP_BUILD_NUMBER: ${{ steps.version.outputs.build_number }}
          VITE_APP_COMMIT_HASH: ${{ steps.version.outputs.commit_hash }}
          VITE_APP_COMMIT_HASH_SHORT: ${{ steps.version.outputs.commit_hash_short }}
          VITE_APP_BUILD_DATE: ${{ steps.version.outputs.build_date }}
          VITE_APP_BRANCH: ${{ steps.version.outputs.branch }}
          VITE_APP_ENVIRONMENT: ${{ steps.version.outputs.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            version-info.json
          retention-days: 30

  # Security Audit (only on main branch)
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true # Allow moderate vulnerabilities to pass CI

  # Bundle Analysis (on main branch only)
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with bundle analysis
        run: npm run build:analyze
        env:
          CI: true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: dist/
          retention-days: 30

  # Deploy to Preview (on PR)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    needs: [quick-validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    needs: [quick-validate, security-audit]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs:
      [
        quick-validate,
        comprehensive-tests,
        console-error-monitoring,
        e2e-tests,
        build,
        security-audit,
      ]

    steps:
      - name: Notify failure
        run: |
          echo "CI/CD pipeline failed!"
          echo "Check the logs for more details."
          echo "Failed job: ${{ needs.*.result }}"
          # Add your notification logic here (Slack, Discord, etc.)
